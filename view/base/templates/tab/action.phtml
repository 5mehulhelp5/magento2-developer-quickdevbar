<?php
/** @var  $block \ADM\QuickDevBar\Block\Tab\Panel */

?>

<table  class="qdb_table">
    <tr>
        <th>Change QDB theme</th>
        <td>
            <select id="qdb-theme-selector">
                <option value="">Standard</option>
                <option value="dark">Dark</option>
                <option value="kawaii">Kawaii UwU</option>
            </select>
        </td>
        <td id="process-template_hints_storefront"></td>
    </tr>
    <tr>
        <th>Template Path Hints for Storefront</th>
        <td><button type="button" data-actionKey="template_hints_storefront"   class="qdb-action">Toggle</button></td>
        <td id="process-template_hints_storefront"></td>
    </tr>
    <tr>
        <th>Template Path Hints for Admin</th>
        <td><button type="button" data-actionKey="template_hints_admin"   class="qdb-action">Toggle</button></td>
        <td id="process-template_hints_admin"></td>
    </tr>
    <tr>
        <th>Add Block Names to Hints</th>
        <td><button type="button" data-actionKey="template_hints_blocks"   class="qdb-action">Toggle</button></td>
        <td id="process-template_hints_blocks"></td>
    </tr>
    <tr>
        <th>Translate inline</th>
        <td><button type="button" data-actionKey="translate"   class="qdb-action">Toggle</button></td>
        <td id="process-translate"></td>
    </tr>
    <tr>
        <th>Flush Cache Storage</th>
        <td><button type="button" data-actionCache="flush"  class="qdb-action">Flush</button></td>
        <td id="process-cache"></td>
    </tr>
    <tr>
        <th>Set developer admin config</th>
        <td><button type="button" data-actionKey="template_hints_storefront"  class="qdb-action">Set</button></td>
        <td id="process-devadmin"></td>
    </tr>
</table>

<script type="text/javascript">
    'use strict';

    function actionConfig() {
        let key = this.getAttribute('data-actionKey');
        let target = 'process-' + key;

        window.quickDevBar.showLoader(target);

        let params = new URLSearchParams({isAjax: 1});
        params.append("config[key]", key);

        window.quickDevBar.qdbFetchPromise('quickdevbar/action/configUpdate?' + params.toString()).then(html => {
            document.getElementById(target).innerHTML = html;
            console.log(html);
        });
    }

    function actionCache()
    {
        var target =  'process-cache';
        window.quickDevBar.showLoader(target);

        window.quickDevBar.qdbFetchPromise('quickdevbar/action/cache').then(html => {
            document.getElementById(target).innerHTML = html;
        });
    }

    document.addEventListener('QDBBarLoaded', (event) => {
        let themeSelector = document.getElementById('qdb-theme-selector');
        let userThemeOption = themeSelector.querySelector('option[value="'+window.quickDevBar.loadUserData('qdb_theme')+'"]');
        if(userThemeOption!==null) {
            userThemeOption.selected="selected"
        }
        themeSelector.addEventListener('change', () => window.quickDevBar.switchTheme(themeSelector.querySelector('option:checked').value));
    });

    document.querySelectorAll('button[data-actionKey]').forEach((button)=> button.addEventListener('click', actionConfig));
    document.querySelector('button[data-actionCache]').addEventListener('click', actionCache);

</script>
