<?php
/** @var \ADM\QuickDevBar\Block\Toolbar $block
 * @var \Magento\Framework\View\Helper\SecureHtmlRenderer $secureRenderer
 */

?>
<!-- Start:ADM_QuickDevBar -->
<!--
           ____        _      _    _____             ____
          / __ \      (_)    | |  |  __ \           |  _ \
         | |  | |_   _ _  ___| | _| |  | | _____   _| |_) | __ _ _ __
         | |  | | | | | |/ __| |/ / |  | |/ _ \ \ / /  _ < / _` | '__|
         | |__| | |_| | | (__|   <| |__| |  __/\ V /| |_) | (_| | |
          \___\_\\__,_|_|\___|_|\_\_____/ \___| \_/ |____/ \__,_|_|


 -->
<div id="qdb-bar" style="display: none;">
    <?=  $block->getChildHtml(); ?>
</div>
<div
     id="qdb-bar-anchor">
    <img src="<?=  $block->getViewFileUrl('ADM_QuickDevBar::images/qdb-icon.png') ?>"
         alt="<?=  __('QuickDevBar'); ?>"
         title="<?=  __('Click to toggle the Quick Development Toolbar'); ?>"/>&nbsp;
</div>
<div id='qdb-action-loader' style="display:none"><?=  $block->getHtmlLoader()?></div>


<script type="text/javascript">
    (function () {
        "use strict";

        window.quickDevBar = {
            options: {
                debugCsp: false,
                etTabWrapper: "qdb-bar",
                elAnchor: "qdb-bar-anchor",
                baseUrl: "",
                ajaxLoading:  true,
                assetsScript: {},
                awaitScript: {},
                assetsCss: {},
                stripedClassname: "striped",
                classToStrip: "qdb_table.striped",
                classToFilter: "qdb_table.filterable",
                classToSort: "qdb_table.sortable",
                tabbisOptions: {memory: 'qdb_tabbis',
                    tabActiveFallback: false
                }
            },
            tabsObj: null,
            /** @see https://stackoverflow.com/a/69616316 */
            addScript: ((src) => new Promise((resolve, reject) => {
                const el = document.createElement('script');
                el.src = src;
                el.addEventListener('load', resolve);
                el.addEventListener('error', reject);
                document.body.append(el);
            })),
            addCss: function (href) {
                const el = document.createElement('link');
                el.href = href;
                el.rel = "stylesheet";
                el.type = "text/css";
                document.body.append(el);
            },
            eventClickAnchor: function () {
                const qdbBar = document.getElementById(this.options.etTabWrapper);
                const qdbBarAnchor = document.getElementById(this.options.elAnchor);

                qdbBar.style.display = this.loadUserData('qdb_display');

                qdbBarAnchor.addEventListener("click", () => {
                    qdbBar.style.display = (qdbBar.style.display === 'none') ? '': 'none';
                    this.saveUserData('qdb_display', qdbBar.style.display);
                });
            },
            run: function () {
                this.eventClickAnchor();
                document.addEventListener('tabbis_pane_ajax_loaded', (event) => {
                    this.applyTabPlugin(event.detail.pane);
                });

                this.addCss(this.options.assetsCss.default);

                /** @see https://usefulangle.com/post/343/javascript-load-multiple-script-by-order */
                let tabScriptPromises = [];
                for (let scriptKey in this.options.assetsScript) {
                    tabScriptPromises.push(this.addScript(this.options.assetsScript[scriptKey]));
                }

                Promise.all(tabScriptPromises)
                    .then(function() {
                        if(this.options.ajaxLoading) {
                            this.qdbFetchPromise("quickdevbar/index/ajax").then(html => {
                                const wrapperElem =  document.getElementById(this.options.etTabWrapper);
                                wrapperElem.innerHTML = html;
                                this.executeScriptElements(wrapperElem);
                            }).then(()=>{
                                this.tabsObj= new tabbisClass(this.options.tabbisOptions);
                                this.applyTabPlugin(document);
                            });
                        } else {
                            this.tabsObj= new tabbisClass(this.options.tabbisOptions);
                            this.applyTabPlugin(document);
                        }
                    }.bind(this))
                    .catch((err) => console.error("Error loading js scripts", 'QDB Error'));

                this.switchTheme(this.loadUserData('qdb_theme'))


            },
            switchTheme:function(qdbTheme) {
                window.quickDevBar.saveUserData('qdb_theme', qdbTheme);
                document.getElementById('qdb-bar').setAttribute('data-theme', qdbTheme);
            },
            showLoader:function(target, type) {
                document.getElementById(target).innerHTML= document.getElementById('qdb-action-loader').innerHTML;
            },
            saveUserData:function(key, value) {
                localStorage.setItem(key, value);
            },
            loadUserData:function(key) {
                return localStorage.getItem(key);
            },
            /**
             * @see https://stackoverflow.com/a/69190644
             * @param containerElement
             */
            executeScriptElements:function (containerElement) {


                const scriptElements = containerElement.querySelectorAll("script");

                Array.from(scriptElements).forEach((scptElement) => {
                    const clonedElement = document.createElement("script");

                    Array.from(scptElement.attributes).forEach((attribute) => {
                        clonedElement.setAttribute(attribute.name, attribute.value);
                    });

                    clonedElement.text = scptElement.text;

                    if(this.options.debugCsp) {
                        console.log(scptElement);
                    }
                    // May cause a csp violation
                    scptElement.parentNode.replaceChild(clonedElement, scptElement);
                });
            },
            qdbFetchPromise: function (routePath) {
                const url = this.options.baseUrl + routePath;
                return fetch(url, {
                        //To be compliant with \Laminas\Http\Request::isXmlHttpRequest
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                        }
                    }
                ).then(response => {
                    if (!response.ok || response.status !==200) {
                        throw new Error(response.status + " Failed Fetch ");
                    }
                    return response.text()
                }).catch((err) => console.error("Can’t access " + url + ". Error " + err, 'QDB Error'));
            },
            /**
             *  Apply enhancement on table
             */
            applyTabPlugin: function (ref) {
                //Sort
                ref.querySelectorAll('table.qdb_table.sortable').forEach((table)=> new SortableTable(table))
                //Filter
                ref.querySelectorAll('table.qdb_table.filterable').forEach((table)=> new FilterTable(table))

                /* classToStrip: Set odd even class on tr */
                ref.querySelectorAll('table.' + this.options.classToStrip + ' :nth-of-type(odd)').forEach(function (tr) {
                    tr.classList.add(this.options.stripedClassname);
                }.bind(this));

                this.addIdeClickEvent(ref);

                document.dispatchEvent(new CustomEvent("QDBBarLoaded", {}));
            },
            /**
             *  Add hyperlink to IDE on file path
             */
            addIdeClickEvent: function(ref) {
                ref.querySelectorAll('span[data-ide-file]:not([data-ide-file=""])').forEach(function (span) {
                    span.addEventListener(
                        "click",
                        (event) => {
                            let ideFile = event.target.getAttribute('data-ide-file');
                            fetch(ideFile).catch((err) => console.error("Can’t access " + url + " response. Blocked by browser?" + err, 'QDB Error'));
                        },
                        false,
                    );
                });
            }
        }

    }());
</script>

<?php
$qdbScripttLoader = "
document.addEventListener('DOMContentLoaded', (event) => {
    dynamicConfig={
        debugCsp: false,
        baseUrl: \"" . $block->getBaseUrl(). "\",
        ajaxLoading:  ". $block->isAjaxLoading() . ",
        assetsScript: {
            filtertable: \"" . $block->getViewFileUrl('ADM_QuickDevBar::js/filter-table.js') . "\",
            tablesorter: \"" . $block->getViewFileUrl('ADM_QuickDevBar::js/sortable-table.js') . "\",
            tab: \"" . $block->getViewFileUrl('ADM_QuickDevBar::js/tabbis.js') . "\",
        },
        awaitScript: {},
        assetsCss: {
            default: \"" . $block->getViewFileUrl('ADM_QuickDevBar::css/quickdevbar.css') . "\",
        }
};
    window.quickDevBar.options = { ...window.quickDevBar.options, ...dynamicConfig };
    window.quickDevBar.run();
});
";
?>
<?= $secureRenderer->renderTag('script', ['type' => 'text/javascript'], $qdbScripttLoader, false); ?>
<!-- End:ADM_QuickDevBar -->
<?php echo 'qdbdate:' . date('c'); ?>

